---
import { Icon } from 'astro-icon/components';
---

<span
    x-data="theme"
    x-cloak
    class:list={[
        'grid-col-1 grid-row-1 transform-all relative grid justify-center justify-self-end overflow-hidden rounded-full bg-surface-overlay p-fl-space-3xs text-center leading-none text-content shadow-inset delay-300 duration-200 md:justify-self-center',
    ]}
>
    <button
        type="button"
        aria-label="set light theme"
        @click="theme = 'light'"
        class="col-start-1 row-start-1 rotate-0 transform duration-500"
        x-bind:class="{'translate-y-fl-space-l -rotate-180' : theme === 'light'}"
        ><Icon name="lucide:sun" class="h-fl-space-m-s w-fl-space-m-s" />
    </button>
    <button
        type="button"
        aria-label="set dark theme"
        @click="theme = 'dark'"
        class="col-start-1 row-start-1 rotate-0 transform duration-500"
        x-bind:class="{'-translate-y-fl-space-l -rotate-180' : theme === 'dark'}"
        ><Icon name="lucide:sun-moon" class="h-fl-space-m-s w-fl-space-m-s" />
    </button>
</span>

<script is:inline>
    const getTheme = () => {
        return (
            localStorage.getItem('theme') ??
            (window.matchMedia('(prefers-color-scheme: dark)').matches
                ? 'dark'
                : 'light')
        );
    };

    const setTheme = (theme) => {
        document.querySelector('html')?.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    };

    let theme = getTheme();
    setTheme(theme);
</script>

<script>
    import Alpine from 'alpinejs';
    document.addEventListener('alpine:init', () => {
        Alpine.data('theme', () => ({
            theme: localStorage.getItem('theme'),

            setTheme(value) {
                localStorage.setItem('theme', value);
                const html = document.querySelector('html');
                const meta = document.querySelector('meta[name="theme-color"]');

                html?.setAttribute('data-theme', value);
                meta?.setAttribute(
                    'content',
                    value === 'dark' ? '#09090b' : '#ffffff',
                );
            },

            init() {
                this.$watch('theme', (value) => {
                    this.setTheme(value);
                });
            },
        }));
    });
</script>
