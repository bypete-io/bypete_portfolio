---
import { Icon } from 'astro-icon/components';
interface Props {
    title: string;
    url: string;
    pathname: string;
    isHeroDark: boolean;
}
const { title, url, pathname, isHeroDark } = Astro.props;
import MenuLink from './MenuLink.astro';

const legibility = isHeroDark
    ? 'hover:text-menudark-active focus:text-menudark-active;'
    : 'hover:text-menu-active focus:text-menu-active;';
---

<li class="relative" x-data="menu">
    <div class="flex items-center">
        <MenuLink
            {url}
            parent={url}
            class="block pr-fl-space-l"
            {title}
            {pathname}
            {isHeroDark}
        />
        <button
            @click="toggle()"
            x-ref="button"
            type="button"
            aria-label="Expand menu"
            :aria-expanded="open"
            :aria-controls="$id('dropdown-button')"
            class:list={[
                'absolute right-fl-space-2xs flex h-fl-space-s w-fl-space-s items-center justify-center rounded-full bg-surface-overlay p-0 focus:outline-none focus:ring-2',
                legibility,
            ]}
        >
            <Icon
                name="lucide:chevron-down"
                x-bind:class="{'rotate-180': open, 'rotate-0': !open}"
                class="inline h-fl-space-xs w-fl-space-xs transform transition-transform duration-200"
            />
        </button>
    </div>
    <div
        x-ref="panel"
        x-show="open"
        @click.outside="close($refs.button)"
        :id="$id('dropdown-button')"
        x-cloak
        x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="transform opacity-0 scale-95"
        x-transition:enter-end="transform opacity-100 scale-100"
        x-transition:leave="transition ease-in duration-75"
        x-transition:leave-start="transform opacity-100 scale-100"
        x-transition:leave-end="transform opacity-0 scale-95"
        class="absolute right-0 mt-fl-space-2xs w-auto origin-top-right"
    >
        <div
            class="max-h-[calc(100vh-3rem-var(--headerheight))] overflow-y-scroll rounded-tight bg-surface-overlay shadow-overlay"
        >
            <slot />
        </div>
    </div>
</li>

<script>
    import Alpine from 'alpinejs';
    document.addEventListener('alpine:init', () => {
        Alpine.data('menu', () => ({
            open: false,

            freeze(freezeState) {
                document.body.classList.toggle('overflow-hidden', freezeState);
                this.$dispatch('show-underlay', { visible: freezeState });
            },
            checkAriaExpanded() {
                const buttons = this.$refs.banner.querySelectorAll('button');
                const expandedButtonFound = [...buttons].some(
                    (button) => button.getAttribute('aria-expanded') === 'true',
                );
                this.freeze(expandedButtonFound);
            },
            toggle() {
                this.open = !this.open;
                if (this.open) {
                    this.$refs.button.focus();
                }
                this.checkAriaExpanded();
            },
            close(focusAfter) {
                this.open = false;
                this.checkAriaExpanded();
                if (focusAfter) {
                    focusAfter.focus();
                }
            },
            init() {
                this.$watch('open', (value, oldValue) => {
                    this.checkAriaExpanded();
                });
            },
        }));
    });
</script>
