---
import { Icon } from 'astro-icon/components';
interface Props {
    title: string;
    url: string;
    pathname: string;
    isHeroDark: boolean;
}
const { title, url, pathname, isHeroDark } = Astro.props;
import MenuLink from './MenuLink.astro';

const legibility = isHeroDark
    ? 'hover:text-menudark-active focus:text-menudark-active;'
    : 'hover:text-menu-active focus:text-menu-active;';
---

<li class="relative" x-data="menu">
    <div class="flex items-center">
        <MenuLink
            {url}
            parent={url}
            class="block pr-fl-space-l"
            {title}
            {pathname}
            {isHeroDark}
        />
        <button
            @click="toggle()"
            x-ref="button"
            type="button"
            aria-label="Expand menu"
            :aria-expanded="open"
            :aria-controls="$id('dropdown-button')"
            class:list={[
                'absolute right-fl-space-2xs flex h-fl-space-s w-fl-space-s items-center justify-center rounded-full bg-surface-overlay p-0 focus:outline-none focus:ring-2',
                legibility,
            ]}
        >
            <Icon
                name="lucide:chevron-down"
                class="inline h-fl-space-xs w-fl-space-xs"
            />
        </button>
    </div>
    <div
        x-ref="panel"
        @click.outside="open && !$refs.button.contains($event.target) && close($refs.button)"
        :id="$id('dropdown-button')"
        x-cloak
        class="absolute right-0 mt-fl-space-2xs hidden w-auto origin-top-right opacity-0"
    >
        <div
            class="max-h-[calc(100vh-3rem-var(--headerheight))] overflow-y-scroll rounded-tight bg-surface-overlay shadow-overlay"
        >
            <slot />
        </div>
    </div>
</li>

<script>
    import { timeline, type TimelineDefinition } from 'motion';
    import Alpine from 'alpinejs';

    import Lenis from '@studio-freight/lenis';
    const lenis = new Lenis();

    const raf = (time) => {
        lenis.raf(time);
        requestAnimationFrame(raf);
    };
    requestAnimationFrame(raf);

    const { body, documentElement: page } = document;
    const toggleDropdownVisibility = (isOpen, panel, button) => {
        const sequenceShowDropdown: TimelineDefinition = [
            [button, { rotate: '540deg' }, { duration: 0.25 }],
            [
                panel,
                {
                    opacity: [0, 1],
                    transform: [
                        'translateY(calc(-1 * var(--space-s))',
                        'translateY(0px)',
                    ],
                    height: ['0px', 'auto'],
                },
                { at: '<', duration: 0.25 },
            ],
        ];

        const sequenceHideDropdown: TimelineDefinition = [
            [button, { rotate: '0' }, { duration: 0.25 }],
            [
                panel,
                {
                    opacity: 0,
                },
                { at: '<', duration: 0.25 },
            ],
        ];

        const sequence = isOpen ? sequenceShowDropdown : sequenceHideDropdown;
        timeline(sequence).finished.then(() => {});
    };

    document.addEventListener('alpine:init', () => {
        Alpine.data('menu', () => ({
            open: false,
            banner: document.getElementById('banner'),
            freeze(freezeState) {
                freezeState ? lenis.stop() : lenis.start();
                body.classList.toggle('overflow-hidden', freezeState);
                this.$dispatch('show-underlay', { visible: freezeState });
                this.$refs.panel.classList.toggle('hidden', !freezeState);
            },
            checkAriaExpanded() {
                const buttons = this.banner?.querySelectorAll('button');
                const expandedButtonFound = [...buttons].some(
                    (button) => button.getAttribute('aria-expanded') === 'true',
                );
                this.freeze(expandedButtonFound);
            },
            toggle() {
                this.open = !this.open;
                this.open && this.$refs.button.focus();
            },
            close(focusAfter) {
                this.open = false; // Close the panel

                if (focusAfter) {
                    focusAfter.focus();
                }
            },
            init() {
                this.$watch('open', (value) => {
                    this.checkAriaExpanded();

                    toggleDropdownVisibility(
                        value,
                        this.$refs.panel,
                        this.$refs.button,
                    );
                });
            },
        }));
    });
</script>
