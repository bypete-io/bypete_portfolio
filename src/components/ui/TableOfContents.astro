---
import { buildToc } from '~/js/utils';
import { Icon } from 'astro-icon/components';
import TableOfContentsHeading from './TableOfContentsHeading.astro';

export interface Heading {
    depth: number;
    slug: string;
    text: string;
    subheadings: Heading[];
}

interface Props {
    headings: Heading;
    class?: string;
}

const { headings, class: className } = Astro.props;
const toc = buildToc(headings);
---

<nav
    x-data="toc()"
    id="toc"
    x-bind:class="$store.banner.state == 'up' ? 'translate-y-fl-space-header ' : ''"
    aria-label="Content sections"
    class:list={[
        'sticky-root sticky -top-px z-toc my-fl-space-l flex w-full transition-all duration-300 md:justify-center',
        className ? className : '',
    ]}
>
    <div
        class="relative w-full max-w-2xl rounded-b transition-all duration-300 md:w-auto"
        x-bind:class="open ? 'grow shadow-d1' : ''"
        x-sticky="shadow-3xl shadow-black/5"
    >
        <button
            x-bind="trigger"
            class="flex w-full items-center justify-between gap-x-fl-space-2xs rounded border border-outline bg-panel px-fl-space-s py-fl-space-2xs font-semibold"
            x-sticky="!rounded-t-none"
            x-bind:class="open ? 'rounded-none ' : ''"
        >
            On this page <Icon
                name="lucide:file-text"
                class="h-fl-space-s w-auto"
            />
        </button>

        <div class="relative z-10">
            <div
                x-cloak
                x-show="open"
                class="absolute left-0 top-0 block max-h-[calc(100dvh-var(--headerheight))] w-full grow overflow-y-scroll rounded-b border border-t-0 border-outline bg-panel px-fl-space-s py-fl-space-2xs shadow-d1 transition-all"
            >
                <ol class="m-0">
                    {
                        toc.map((heading) => (
                            <TableOfContentsHeading heading={heading} />
                        ))
                    }
                </ol>
            </div>
        </div>
    </div>
</nav>
<script>
    import sticky from 'alpinejs-sticky';

    document.addEventListener('alpine:init', () => {
        Alpine.plugin(sticky);

        Alpine.data('toc', () => ({
            open: false,
            trigger: {
                '@click': function () {
                    this.open = !this.open;
                },
                '@click.outside': function () {
                    setTimeout(() => {
                        this.open = false;
                    }, 750);
                },
            },
        }));
    });
    const setCurrent: IntersectionObserverCallback = (entries) => {
        for (let entry of entries) {
            const { id } = entry.target;
            const tocHeadingEl = document.querySelector(
                `#toc a[href="#${id}"]`,
            );
            if (!tocHeadingEl) return;
            if (entry.isIntersecting) {
                document
                    .querySelectorAll('#toc a')
                    .forEach((e) => e.setAttribute('data-state', ''));
                tocHeadingEl.setAttribute('data-state', 'active');
            }
        }
    };

    const observerOption: IntersectionObserverInit = {
        rootMargin: '0px 0px -66%',
        threshold: 1,
    };
    const headingObserver = new IntersectionObserver(
        setCurrent,
        observerOption,
    );
    document
        .querySelectorAll('#main-content :is(h2,h3,h4)')
        .forEach((heading) => headingObserver.observe(heading));
</script>
