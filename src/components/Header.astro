---
import { Icon } from 'astro-icon/components';
import Navigation from './Navigation.astro';
import ThemeIcon from './ThemeIcon.astro';

interface Props {
    isHeroDark: boolean;
}
const { isHeroDark = false } = Astro.props;
---

<header
    id="banner"
    class="group fixed top-0 z-banner w-full py-fl-space-s opacity-0 shadow-banner shadow-gray-950/10 group-data-start/page:shadow-none"
    x-cloak
    data-off-canvas-sticky
>
    <div
        class="mx-auto grid max-w-container grid-cols-2 items-center justify-between gap-x-fl-space-m lg:grid-cols-3"
    >
        <a
            href="/"
            x-cloak
            aria-label="byPete - home"
            class="grid h-fl-space-l w-auto grid-cols-1 grid-rows-1"
        >
            {
                isHeroDark ? (
                    <>
                        <span class="col-start-1  group-data-up/page:opacity-0">
                            <Icon
                                name="bypete__white"
                                class="h-fl-space-l w-auto"
                            />
                        </span>
                        <span class="col-start-1 opacity-0 group-data-up/page:opacity-100 ">
                            <Icon
                                name="bypete__brand"
                                class="h-fl-space-l w-auto"
                            />
                        </span>
                    </>
                ) : (
                    <Icon name="bypete__brand" class="h-fl-space-l w-auto" />
                )
            }
        </a>

        <div class="justify-self-end lg:justify-self-center"><ThemeIcon /></div>
        <Navigation class="hidden justify-self-end lg:block" {isHeroDark} />
    </div>
</header>

<script>
    import { animate, timeline } from 'motion';

    const page = document.documentElement;
    const banner = document.getElementById('banner');
    const toc = document.getElementById('toc');
    const tocWrapper = document.getElementById('tocWrapper');

    const vh = window.innerHeight;

    let animationInProgress = false;
    let visible = true;
    let tocShift = false;

    let throttleTimer = null;
    const throttleInterval = 150;
    let scrollCache = 0;

    const handleBanner = () => {
        if (throttleTimer) {
            return;
        }
        throttleTimer = setTimeout(() => {
            throttleTimer = null;
            if (animationInProgress) {
                return;
            }
            const st = window.pageYOffset || page.scrollTop;
            let tocRect;
            let isTocSticky;
            if (toc !== undefined && toc !== null) {
                tocRect = toc.getBoundingClientRect();
                isTocSticky = tocRect.top <= 0;
            }

            !isTocSticky && tocShift && unstickToc();
            if (st === 0) {
                setBannerState('start');
                startBanner();
            } else if (st > scrollCache && visible) {
                hideBanner();
            } else if (st < scrollCache && st > vh * 0.5 && !visible) {
                setBannerState('up');
                showBanner(isTocSticky);
            }

            scrollCache = st <= 0 ? 0 : st; // For Mobile or negative scrolling
        }, throttleInterval);
    };

    const setBannerState = (state) => page?.setAttribute('data-banner', state);

    const startBanner = () => {
        animationInProgress = true;
        visible = true;
        animate(
            banner,
            {
                opacity: 1,
                transform: ['translateY(0)'],
                background: 'none',
            },
            { easing: 'ease-in-out', duration: 0.25 }, //easeInOutQuart
        ).finished.then(() => {
            animationInProgress = false;
        });
    };

    const unstickToc = () => {
        animationInProgress = true;

        animate(
            tocWrapper,
            { transform: ['translateY(0%)'] },
            { duration: 0.5 },
        ).finished.then(() => {
            tocShift = false;
            animationInProgress = false;
        });
    };

    const hideBanner = () => {
        animationInProgress = true;
        visible = false;
        tocShift = false;

        const sequence = [
            [
                banner,
                {
                    transform: ['translateY(-100%)'],
                },
            ],

            [tocWrapper, { transform: ['translateY(0%)'] }, { at: '<' }],
            [banner, { background: 'none' }, {}],
        ];

        timeline(sequence, {
            duration: 0.5,
            easing: 'linear',
        }).finished.then(() => {
            animationInProgress = false;
            setBannerState('down');
        });
    };

    const showBanner = (isTocSticky) => {
        animationInProgress = true;
        visible = true;
        tocShift = isTocSticky;

        banner.style.opacity = `1`;
        banner.style.background = `rgb(var(--banner-up)/1)`;

        const animationProperties = isTocSticky
            ? { transform: ['translateY(var(--headerheight))'] }
            : {
                  transform: ['translateY(0%)'],
              };

        const sequence = [
            [
                banner,
                {
                    transform: ['translateY(0)'],
                    background: 'rgb(var(--banner-up)/1)',
                },
                {},
            ],
            [tocWrapper, animationProperties, { at: '<' }],
        ];

        timeline(sequence, {
            duration: 0.5,
            easing: 'linear',
        }).finished.then(() => {
            animationInProgress = false;
        });
    };

    handleBanner();
    window.addEventListener('scroll', handleBanner);
</script>
