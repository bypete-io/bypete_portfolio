---
import pjson from '../../package.json';

interface Props {
    metaUrl?: string;
    title?: string | undefined;
    description?: string | undefined;
    image?: string;
    isHeroDark?: boolean;
    pathname?: string;
}

const {
    metaUrl = 'https://bypete.uk',
    title = 'byPete: Portfolio Site',
    description = 'Portfolio site of Pete Wallace, a Surrey based Front-End developer.',
    image = '/img/og__image.jpg',
    isHeroDark,
} = Astro.props;

const pathname = new URL(Astro.request.url).pathname;
const absoluteUrl = metaUrl + pathname;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta
    name="viewport"
    content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover"
/>
<meta name="generator" content={Astro.generator} />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
<meta name="msapplication-TileColor" content="#00aba9" />
<meta name="theme-color" content={isHeroDark ? '#0f172a' : '#ffffff'} />
<meta name="version" content={`v${pjson.version}`} />

<meta property="og:title" content={`${title} | byPete`} />
<meta property="og:site_name" content="byPete: Portfolio Site" />
<meta property="og:url" content={absoluteUrl} />
<meta property="og:description" content={description} />
<meta property="og:image" content={`${metaUrl}/${image}`} />
<meta property="og:type" content="article" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
    href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,300;0,400;0,500;0,700;0,800;1,300;1,400;1,500;1,700;1,800&family=Roboto:ital,wght@0,300;0,400;0,500;0,700;0,900;1,300;1,400;1,500;1,700;1,900&display=swap"
    rel="stylesheet"
/>
<!-- <script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script> -->
