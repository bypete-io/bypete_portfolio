---
import { Icon } from 'astro-icon/components';
import Button from '../ui/Button.astro';
---

<!-- https://usebasin.com/f/64b35c1258c2 -->
<div x-data="formValidate" class="not-prose h-full">
    <form
        data-astro-reload
        x-on:submit.prevent="onSubmitData()"
        name="contact"
        x-ref="form"
        class="form"
        action="https://usebasin.com/f/64b35c1258c2"
        method="post"
        accept-charset="UTF-8"
        enctype="multipart/form-data"
        x-bind:class="{ 'hidden' : isSent }"
    >
        <div
            class="group mt-fl-space-s"
            x-data="observer()"
            x-bind:class="{ 'has-error': isError, 'has-success': isValid}"
        >
            <label class="font-medium" for="InputName">Name</label>
            <div class="relative">
                <input
                    type="text"
                    name="name"
                    class="form__input w-full"
                    id="InputName"
                    placeholder="Enter your name and surname"
                    required="required"
                    x-ref="input"
                />
            </div>
            <div id="InputNameError"></div>
        </div>
        <div
            class="group mt-fl-space-s"
            x-data="observer()"
            x-bind:class="{ 'has-error': isError, 'has-success': isValid}"
        >
            <label class="font-medium" for="InputEmail">Email address</label>
            <div class="relative">
                <input
                    type="email"
                    name="email"
                    class="form__input w-full pr-fl-space-l"
                    id="InputEmail"
                    placeholder="you@example.com"
                    x-ref="input"
                    required
                />
                <div
                    class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-fl-space-2xs"
                >
                    <Icon
                        name="lucide:alert-circle"
                        class="success-svg hidden h-fl-space-s w-fl-space-s text-red-500 group-[.has-error]:block"
                    />
                    <Icon
                        name="lucide:check-circle"
                        class="success-svg hidden h-fl-space-s w-fl-space-s text-green-500 group-[.has-success]:block"
                    />
                </div>
            </div>
            <div id="InputEmailError"></div>
        </div>
        <div
            class="group mt-fl-space-s"
            x-data="observer()"
            x-bind:class="{ 'has-error': isError, 'has-success': isValid}"
        >
            <label class="font-medium" for="InputMessage">Your message</label>
            <div class="relative">
                <textarea
                    rows="6"
                    cols="50"
                    name="message"
                    class="form__input w-full"
                    id="InputMessage"
                    x-ref="input"
                    placeholder="Add a message"
                    data-pristine-required-message="Don't forget to add your message..."
                    required></textarea>
            </div>
            <div id="InputMessageError"></div>
        </div>
        <div class="absolute -z-10 h-0 w-0 opacity-0">
            <label class="font-medium" for="_byPete">When to call?</label>
            <div class="relative">
                <input
                    tabindex="-1"
                    autocomplete="off"
                    type="text"
                    name="contact"
                    aria-hidden="true"
                    id="_byPete"
                />
            </div>
        </div>
        <div class="mt-fl-space-s">
            <Button type="submit" theme="primary">Send now</Button>
        </div>
    </form>
    <div
        x-cloak
        x-bind:class="{ 'flex items-center justify-center h-full w-full animate-appear' : isSent, 'hidden' : !isSent }"
    >
        <div class="rte w-full text-center">
            <Icon
                name="lucide:mail-check"
                class="mx-auto h-fl-space-2xl w-auto animate-fade-in-up text-green-500 duration-500"
            />
            <h3 class="text-center">Your message has been sent</h3>
            <p>Thanks for getting in touch, I'll try to respond quickly.</p>
        </div>
    </div>
</div>
<script>
    import Alpine from 'alpinejs';
    import JustValidate from '~/../node_modules/just-validate';

    document.addEventListener('alpine:init', () => {
        Alpine.data('formValidate', () => ({
            isSent: false,
            form: undefined,
            validator: undefined,
            init() {
                this.form = this.$refs.form;

                this.validator = new JustValidate(this.form, {
                    errorFieldCssClass: ['error'],
                    errorLabelCssClass: [
                        'text-red-600',
                        'text-fl-step--1',
                        'mt-fl-space-3xs',
                    ],
                    errorLabelStyle: '',
                    errorFieldStyle: '',
                    successFieldCssClass: ['valid'],
                    successLabelCssClass: ['valid'],
                    validateBeforeSubmitting: true,
                })
                    .addField(
                        '#InputName',
                        [
                            {
                                rule: 'required',
                                errorMessage: 'Please add your name',
                            },
                        ],
                        { errorsContainer: '#InputNameError' },
                    )
                    .addField(
                        '#InputEmail',
                        [
                            {
                                rule: 'required',
                                errorMessage: 'Please add your email',
                            },
                            {
                                rule: 'email',
                                errorMessage: 'Please check your email address',
                            },
                        ],
                        { errorsContainer: '#InputEmailError' },
                    )
                    .addField(
                        '#InputMessage',
                        [
                            {
                                rule: 'required',
                                errorMessage:
                                    "Don't forget to add your message!",
                            },
                            {
                                validator: (value) =>
                                    value !== undefined &&
                                    value.trim().split(' ').length > 3,
                                errorMessage:
                                    'Message should be more than 3 words.',
                            },
                        ],
                        { errorsContainer: '#InputMessageError' },
                    )
                    .addField('#_byPete', [
                        {
                            validator: (value) => value === '',
                        },
                    ]);
            },
            onSubmitData() {
                this.validator.validate();
                if (this.validator.isValid) {
                    //this.form.submit();

                    const formData = new FormData(this.form);
                    fetch('https://usebasin.com/f/64b35c1258c2', {
                        method: 'POST',
                        headers: {
                            Accept: 'application/json',
                        },
                        body: formData,
                    })
                        .then((response) => {
                            if (response.status === 200) {
                                this.isSent = true;
                                //window.location.href = '/connect/sent'; //relative to domain
                            }
                        })
                        .catch((error) => console.log(error));
                } else {
                    console.log('failed validation');
                }
            },
        }));

        Alpine.data('observer', () => ({
            isError: false,
            isValid: false,
            checkStatus() {
                const observer = new MutationObserver((mutationList) => {
                    mutationList.forEach((mutation) => {
                        if (
                            mutation.type === 'attributes' &&
                            mutation.attributeName === 'class'
                        ) {
                            this.isError =
                                this.$refs.input.classList.contains('error');
                            this.isValid =
                                this.$refs.input.classList.contains('valid');
                        }
                    });
                });

                observer.observe(this.$refs.input, { attributes: true });
            },
            init() {
                this.checkStatus();
            },
        }));
    });
</script>
