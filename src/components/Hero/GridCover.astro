---
import type { HTMLAttributes } from 'astro/types';
import type { HeroKeys } from '~/components/Hero/Hero.astro';
import type { ImageMetadata } from 'astro';
import Link from '~/components/ui/Link.astro';
import { Image } from 'astro:assets';
import { Picture } from 'astro:assets';
import HeroPicture from '../Images/HeroPicture.astro';
import { Icon } from 'astro-icon/components';

interface Props extends HeroKeys {}

const {
    class: ClassName,
    copy,
    actions,
    visual,
    cover,
    headline,
} = Astro.props;

const imageFiles = import.meta.glob<{ default: ImageMetadata }>(
    '../../assets/**/*.{png,webp,jpg,jpeg}',
);

const featureImage = imageFiles[`../../assets/${visual?.src}`];
const coverImage = imageFiles[`../../assets/${cover?.src}`];

const featureSrc = (await featureImage()).default;
const coverSrc = (await coverImage()).default;
---

{
    cover && (
        <div class="absolute inset-0 h-full w-full">
            <HeroPicture
                src={coverSrc}
                widths={cover.widths ?? [320, 640, 1280, coverSrc.width]}
                sizes={cover.sizes ?? '100vw'}
                class:list={[
                    cover.class
                        ? cover.class
                        : 'h-full w-full object-cover object-bottom md:object-center',
                ]}
                alt={cover.alt}
            />
        </div>
    )
}

<div
    class="relative mx-auto grid max-w-container grid-cols-1 grid-rows-1 gap-fl-space-s pt-[var(--headerheight)] md:min-h-widescreen md:grid-cols-block50 lg:h-block lg:min-h-block 2xl:grid-cols-block33"
>
    <div
        class="w-full self-center"
        x-cloak
        :class="shown ? 'animate-fade-in-down' : 'invisible'"
    >
        <h1 class="relative text-fl-step-6 text-shadow-headline">
            {headline}
        </h1>
        <div class="rte">
            <Fragment set:html={copy} />
            {
                actions && (
                    <p class="flex flex-row gap-2">
                        {actions.map((cta) => (
                            <Link
                                theme={cta.theme}
                                class={cta.class}
                                href={cta.href}
                                isIcon={cta.icon && cta.icon.length > 0}
                            >
                                {cta.text}
                                {cta.icon && (
                                    <Icon
                                        name={cta.icon}
                                        class="h-fl-space-s w-fl-space-s"
                                    />
                                )}
                            </Link>
                        ))}
                    </p>
                )
            }
        </div>
    </div>
    {
        visual && (
            <div class:list={[visual.wrapper ? visual.wrapper : 'relative']}>
                <Picture
                    src={featureSrc}
                    densities={visual.densities ?? [1.5, 2]}
                    width={visual.width ?? 600}
                    class:list={[
                        visual.class
                            ? visual.class
                            : 'h-full w-full object-contain object-bottom',
                    ]}
                    alt={visual.alt}
                    loading="eager"
                />
            </div>
        )
    }
</div>
