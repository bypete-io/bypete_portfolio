---
import type { HTMLAttributes } from 'astro/types';
import BlockImage from '~/components/Images/BlockImage.astro';
import { Image } from 'astro:assets';

interface VisualKeys {
    url: string;
    alt: string;
}
interface CoverKeys {
    url: string;
    alt: string;
    credit: string;
}

interface Props extends HTMLAttributes<'div'> {
    cover?: Partial<CoverKeys>;
    visual?: Partial<VisualKeys>;
    legibility?: string;
}

const { cover, visual, legibility, ...rest } = Astro.props;
let picture;
if (visual) {
    picture = await import(/* @vite-ignore */ `../../assets/${visual?.url}`); // this is async
}
---

<div class="absolute inset-0 h-full w-full">
    <slot name="background" />
</div>

<div
    class="relative mx-auto grid max-w-container grid-cols-1 grid-rows-1 gap-4 pt-[var(--smheaderheight)] md:min-h-widescreen md:grid-cols-block50 md:gap-8 md:pt-[var(--headerheight)] lg:h-block lg:min-h-block 2xl:grid-cols-block33"
>
    <div
        class="w-full self-center"
        x-cloak
        :class="shown ? 'animate-fade-in-down' : 'invisible'"
    >
        <!-- content -->
        <slot name="content" />
        <!-- END content -->
    </div>

    <!-- visual -->

    {
        visual ? (
            <div class="relative flex justify-center">
                <div
                    class="h-full w-full"
                    x-bind:class="shown ? 'animate-stretch' : 'invisible'"
                >
                    <Image src={picture.default} alt="alt" />
                </div>
            </div>
        ) : (
            <slot name="visual" />
        )
    }
    <!-- END visual -->
</div>
