---
import type { HTMLAttributes } from 'astro/types';
import GridImage from '~/components/Hero/GridImage.astro';
import GridHome from '~/components/Hero/GridHome.astro';
import GridCover from '~/components/Hero/GridCover.astro';
import { Icon } from 'astro-icon/components';
import utilities from '~/data/utilities.json';
import ScrollPrompt from '~/components/ui/ScrollPrompt.astro';

interface VisualKeys {
    url: string;
    alt: string;
}
interface CoverKeys {
    url: string;
    alt: string;
    credit: string;
}

interface HeroKeys {
    wrapper?: string;
    dark?: boolean;
    bg?: string;
    mode?: 'plain' | 'home' | 'image' | 'cover' | 'custom';
    class?: string;
    visual?: Partial<VisualKeys>;
    cover?: Partial<CoverKeys>;
    legibility?: string;
    threshold?: number;
    shadow?: string;
    isContained?: boolean;
    scrollprompt?: boolean;
}

export interface Props extends HTMLAttributes<'div'> {
    title?: string;
    hero?: Partial<HeroKeys>;
}

const fm = Astro.props.frontmatter || Astro.props;
const { title: headline, hero = {}, ...rest } = fm;
const {
    dark = false,
    wrapper = '',
    bg = '',
    mode = 'plain',
    class: ClassName = '',
    legibility,
    shadow,
    isContained,
    scrollprompt,
    threshold,
    visual,
} = hero as HeroKeys;

const intersect = {
    'x-data': `{ shown: false }`,
    [`x-intersect.threshold.${threshold}`]: `shown = true`,
};

const color = legibility || (dark ? 'text-white' : 'text-slate-800');
let wrapperClass = '';

switch (mode) {
    case 'plain':
        wrapperClass = `${
            wrapper || ''
        } max-w-container mx-auto pt-[var(--smheaderheight)] md:pt-[var(--headerheight)]`;
        break;
    case 'image':
        wrapperClass = wrapper || '';
        // wrapperClass = `${
        //     wrapper || ''
        // } min-h-photo pt-[var(--smheaderheight)] md:min-h-33vw  xl:min-h-block`;
        break;
    case 'custom':
        wrapperClass = `${wrapper || ''} custom-wrapper`;
        break;
    // Add more cases as needed
    default:
        // Handle default case, if necessary
        wrapperClass = wrapper || '';
}
---

<div
    id="hero"
    class:list={[
        'relative w-full outline-none ',
        bg ? bg : '',
        color ? color : '',
        ClassName,
        wrapperClass,
        { 'overflow-hidden': isContained },
    ]}
    {...threshold ? intersect : {}}
    {...rest}
>
    {
        mode === 'plain' && (
            <>
                <h1
                    id="headline"
                    class:list={[
                        'heading relative mx-auto max-w-3xl text-center text-3xl lg:text-7xl',
                        utilities.tramline.double.t,
                    ]}
                >
                    {headline}
                </h1>
            </>
        )
    }
    {
        mode === 'home' && (
            <>
                <GridHome>
                    <slot slot="background" name="background" />
                    <slot slot="content" name="content" />
                    <slot slot="visual" name="visual" />
                </GridHome>
            </>
        )
    }
    {
        mode === 'image' && (
            <>
                <GridImage {visual}>
                    <slot slot="background" name="background" />
                    <slot slot="content" name="content" />
                    <slot slot="visual" name="visual" />
                </GridImage>
            </>
        )
    }

    {
        mode === 'cover' && (
            <>
                <GridCover>
                    <slot slot="content" name="content" />
                    <slot slot="visual" name="visual" />
                </GridCover>
            </>
        )
    }
    {
        mode === 'custom' && (
            <>
                <slot />
            </>
        )
    }

    <slot />
    {
        scrollprompt && (
            <div class="pointer-events-none absolute bottom-0 left-1/2 z-shortcuts -translate-x-1/2 pb-4 md:pb-8">
                <ScrollPrompt />
            </div>
        )
    }
</div>

<script>
    import intersect from '@alpinejs/intersect';
    document.addEventListener('alpine:init', () => {
        Alpine.plugin(intersect);
    });
</script>
