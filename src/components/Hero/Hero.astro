---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';

import GridImage from '~/components/Hero/GridImage.astro';
import GridHome from '~/components/Hero/GridHome.astro';
import GridCover from '~/components/Hero/GridCover.astro';
import { Icon } from 'astro-icon/components';
import ScrollPrompt from '~/components/ui/ScrollPrompt.astro';
import SwipePrompt from '~/components/ui/SwipePrompt.astro';

export interface VisualKeys {
    src: string | ImageMetadata;
    widths?: number[];
    sizes?: string;
    alt: string;
    url: string;
    wrapper?: string;
    class?: string;
}
export interface CoverKeys {
    src: string | ImageMetadata;
    widths?: number[];
    sizes?: string;
    alt: string;
    url: string;
    wrapper?: string;
    class?: string;
}

export interface CTA {
    text: string;
    theme?:
        | 'primary'
        | 'secondary'
        | 'white'
        | 'whiteline'
        | 'outline'
        | 'quiet'
        | 'link'
        | 'disabled';
    class?: string;
    size?: 'sm' | 'md' | 'lg';
    icon: string;
}

interface ActionProps {
    areas: CTA[];
}

export interface HeroKeys {
    wrapper?: string;
    dark?: boolean;
    bg?: string;
    headline?: string;
    mode?: 'plain' | 'home' | 'image' | 'cover' | 'custom';
    class?: string;
    visual?: Partial<VisualKeys>;
    copy?: string;
    cover?: Partial<CoverKeys>;
    legibility?: string;
    threshold?: number;
    shadow?: string;
    isContained?: boolean;
    actions?: Partial<ActionProps>;
    prompt?: 'swipe' | 'scroll';
}

export interface Props extends HTMLAttributes<'div'> {
    title?: string;
    hero?: Partial<HeroKeys>;
}

const fm = Astro.props.frontmatter || Astro.props;
const { title, hero = {}, ...rest } = fm;
const {
    dark = false,
    wrapper = '',
    bg = '',
    mode = 'plain',
    class: ClassName = '',
    legibility,
    shadow,
    isContained,
    prompt,
    threshold,
    visual,
    cover,
    headline,
    actions,
    copy,
} = hero as HeroKeys;

const intersect = {
    'x-data': `{ shown: false }`,
    [`x-intersect.threshold.${threshold}`]: `shown = true`,
};

const color = legibility || (dark ? 'text-content-light' : 'text-content');
const heroTitle = headline || title;
let wrapperClass = '';

switch (mode) {
    case 'plain':
        wrapperClass = `${
            wrapper || ''
        } max-w-container mx-auto pt-[var(--headerheight)]`;
        break;
    case 'image':
        wrapperClass = wrapper || '';
        // wrapperClass = `${
        //     wrapper || ''
        // } min-h-photo pt-[var(--headerheight)] md:min-h-33vw  xl:min-h-block`;
        break;
    case 'custom':
        wrapperClass = `${wrapper || ''} custom-wrapper`;
        break;
    // Add more cases as needed
    default:
        // Handle default case, if necessary
        wrapperClass = wrapper || '';
}
---

<div
    id="hero"
    class:list={[
        'relative w-full outline-none ',
        bg ? bg : '',
        color ? color : '',
        ClassName,
        wrapperClass,
        { 'overflow-hidden': isContained },
    ]}
    {...threshold ? intersect : {}}
    {...rest}
>
    {
        mode === 'plain' && (
            <>
                <h1
                    id="headline"
                    class="heading relative mx-auto max-w-3xl pt-fl-space-xl text-center text-fl-step-6"
                >
                    {title}
                </h1>
            </>
        )
    }
    {
        mode === 'home' && (
            <>
                <GridHome>
                    <slot slot="background" name="background" />
                    <slot slot="content" name="content" />
                    <slot slot="visual" name="visual" />
                </GridHome>
            </>
        )
    }
    {
        mode === 'image' && (
            <>
                <GridImage {visual}>
                    <slot slot="background" name="background" />
                    <slot slot="content" name="content" />
                    <slot slot="visual" name="visual" />
                </GridImage>
            </>
        )
    }

    {
        mode === 'cover' && (
            <>
                <GridCover
                    headline={heroTitle}
                    {visual}
                    {cover}
                    legibility={color}
                    {copy}
                    {actions}
                />
            </>
        )
    }
    {
        mode === 'custom' && (
            <>
                <slot />
            </>
        )
    }

    <slot />

    {
        prompt && (
            <div class="pointer-events-none absolute bottom-fl-space-s left-1/2 z-shortcuts -translate-x-1/2  ">
                {prompt === 'scroll' && <ScrollPrompt />}
                {prompt === 'swipe' && <SwipePrompt />}
            </div>
        )
    }
</div>

<script>
    import intersect from '@alpinejs/intersect';

    document.addEventListener('alpine:init', () => {
        Alpine.plugin(intersect);
    });
</script>
