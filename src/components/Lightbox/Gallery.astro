---
import Lightbox from './Lightbox.astro';

export interface LightboxMetadata extends ImageMetadata {
    title: string;
    class?: string;
    caption?: string;
    cropped?: boolean;
}

interface LightboxSet {
    title: string;
    image: string;
    class?: string;
    caption?: string;
    cropped?: boolean;
}

interface DataKeys {
    folder: string;
    [key: string]: LightboxSet[] | string; // Allow for dynamic keys with specific types
}

export interface Props {
    data: Partial<DataKeys>;
    collection: string;
}

const { data, collection } = Astro.props;

const isDataValid = (
    data: Props['data'],
    collection: Props['collection'],
): data is DataKeys => {
    return !!data && !!collection && Array.isArray(data[collection]);
};

const getFolderFiles = (
    data: Props['data'],
    collection: Props['collection'],
    imageFiles: Record<string, ImageMetadata>,
): string[] => {
    if (!isDataValid(data, collection)) {
        console.warn('Invalid data or collection provided to Work component', {
            data,
            collection,
        });
        return [];
    }

    return Object.keys(imageFiles).filter((image) => {
        // Check if the 'image' property exists in the collection array
        const collectionData = data?.[collection] as LightboxSet[] | undefined; // Type assertion
        const isInCollection =
            Array.isArray(collectionData) &&
            collectionData.some(
                (asset) => `../../${data.folder}/${asset.image}` === image,
            );

        // Return true if the condition is satisfied
        return isInCollection;
    });
};

const getImageSrcs = (
    data: Props['data'],
    collection: Props['collection'],
    folderFiles: string[],
    imageFiles: Record<string, ImageMetadata>,
): LightboxMetadata[] => {
    return folderFiles.map((image) => {
        const collectionData = data?.[collection] as LightboxSet[] | undefined;

        const asset =
            Array.isArray(collectionData) &&
            collectionData.find(
                (asset) => `../../${data.folder}/${asset.image}` === image,
            );

        if (asset) {
            // Include additional properties from collection in the imageFiles object
            return {
                ...imageFiles[image],
                title: asset.title,
                caption: asset.caption,
                class: asset.class,
                cropped: asset.cropped,
            };
        }

        return {
            ...imageFiles[image], // ImageMetadata properties
            title: '',
            class: undefined,
            caption: undefined,
            cropped: undefined,
        };
    });
};

const imageFiles = import.meta.glob<ImageMetadata>(
    // '../../assets/work/**/*.{png,webp,jpg,jpeg}',
    '../../{assets,content}/**/*.{png,webp,jpg,jpeg}',
    {
        import: 'default',
        eager: true,
    },
);

const folderFiles = getFolderFiles(data, collection, imageFiles);
const imageSrcs = getImageSrcs(data, collection, folderFiles, imageFiles);

const gallery = 'work-' + collection;
---

<Lightbox id={gallery} images={imageSrcs}>
    <slot slot="title" name="title" />
    <slot />
</Lightbox>
