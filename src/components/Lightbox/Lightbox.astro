---
import type { HTMLAttributes } from 'astro/types';
import 'photoswipe/style.css';
import { Icon } from 'astro-icon/components';
import LightboxImage from '~/components/Images/LightboxImage.astro';

export interface Props extends HTMLAttributes<'div'> {
    id: string;
    images: ImageMetadata[];
    wrapper?: string;
    class?: string;
    bg?: string;
    breakout?: boolean;
}

const {
    id,
    images,
    wrapper = '',
    bg = 'bg-surface-sunken',
    class: className,
    breakout,
    ...rest
} = Astro.props;
---

<section
    id={id}
    class:list={[
        'lightbox not-prose group relative  shadow-inset ',
        bg && bg,
        wrapper ? wrapper : '',
        className
            ? className
            : ` p-fl-space-s-m ${
                  !breakout
                      ? '-mx-fl-space-s-m my-fl-space-xl rounded-tight'
                      : 'breakout'
              }`,
    ]}
    {...rest}
    x-data="{ shown: false }"
    x-intersect.threshold.10="shown = true"
>
    <div
        class="mb-fl-space-m flex flex-col items-start justify-between leading-snug md:flex-row"
    >
        <slot name="title" />
        <p
            class="pointer-events-none flex transform gap-fl-space-2xs text-fl-step--1 text-content-whisper duration-500 group-focus-within:text-content-quiet group-hover:text-content-quiet md:w-1/3"
        >
            <Icon
                name="lucide:zoom-in"
                class="inline-block h-auto w-fl-space-m"
            /> Tap any image to view in more detail. Use mouse scroll to zoom in.
        </p>
    </div>
    <slot />

    <div
        class="mt-fl-space-m grid grid-flow-dense auto-rows-[100px] grid-cols-3 gap-fl-space-m md:auto-rows-[160px] md:grid-cols-4"
    >
        {
            images.map((image, i) => (
                <>
                    <div class:list={[image.class || '']}>
                        <LightboxImage
                            src={image}
                            alt={image.title}
                            width={480}
                            densities={[1.5, 2]}
                            format="webp"
                            height={(image.height * 480) / image.width}
                            class="absolute inset-0 h-full w-full object-cover object-top"
                        />
                    </div>
                </>
            ))
        }
    </div>
</section>

<script>
    import intersect from '@alpinejs/intersect';

    document.addEventListener('alpine:init', () => {
        Alpine.plugin(intersect);
    });
</script>
<script>
    import PhotoSwipeLightbox from 'photoswipe/lightbox';
    const smallScreenPadding = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
    };
    const largeScreenPadding = {
        top: 48,
        bottom: 48,
        left: 32,
        right: 32,
    };

    const lightbox = new PhotoSwipeLightbox({
        gallery: '#lightbox, .lightbox',
        children: 'a[data-lightbox]',
        // optionaly adjust viewport
        paddingFn: (viewportSize) => {
            return viewportSize.x < 700
                ? smallScreenPadding
                : largeScreenPadding;
        },
        wheelToZoom: true,
        bgOpacity: 0.85,
        pswpModule: () => import('photoswipe'),
    });

    lightbox.on('uiRegister', () => {
        lightbox.pswp.ui.registerElement({
            name: 'custom-caption',
            order: 9,
            isButton: false,
            appendTo: 'root',
            className:
                'bg-slate-900/75 !opacity-0 duration-300 rounded text-content-light text-fl-step--1 max-w-[calc(100%-4rem)] w-auto absolute left-1/2 -translate-x-1/2 bottom-2.5 px-2 py-1',
            html: 'Caption text',
            // eslint-disable-next-line no-unused-vars
            onInit: (el, pswp) => {
                const captionDom = el;
                lightbox.pswp.on('change', () => {
                    if (!captionDom.classList.contains('!opacity-0')) {
                        captionDom.classList.add('!opacity-0');
                    }
                    const currSlideElement =
                        lightbox.pswp.currSlide.data.element;
                    let captionHTML = '';
                    if (currSlideElement) {
                        const hiddenCaption =
                            currSlideElement.querySelector('[data-caption]');
                        if (hiddenCaption) {
                            // get caption from element with class hidden-caption-content
                            captionHTML = hiddenCaption.innerHTML;
                            captionDom.classList.remove('!opacity-0');
                        } else {
                            // get caption from alt attribute
                            if (!captionDom.classList.contains('!opacity-0')) {
                                el.classList.add('!opacity-0');
                            }
                            captionHTML = currSlideElement
                                .querySelector('img')
                                .getAttribute('alt');
                        }
                    }
                    captionDom.innerHTML = captionHTML || '';
                });
            },
        });
    });

    lightbox.init();
</script>
