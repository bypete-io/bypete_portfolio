---
import type { HTMLAttributes } from 'astro/types';
import 'photoswipe/style.css';
import { Icon } from 'astro-icon/components';
import LightboxImage from '~/components/Images/LightboxImage.astro';

import utilities from '~/data/utilities.json';

export interface Props extends HTMLAttributes<'div'> {
    id: string;
    images: ImageMetadata[];
    wrapper?: string;
    class?: string;
    bg?: string;
    breakout?: boolean;
}

const fm = Astro.props.frontmatter || Astro.props;
const {
    id,
    images,
    wrapper = '',
    bg = 'bg-underlay-light',
    class: className,
    breakout,
    ...rest
} = fm as Props;
---

<section
    id={id}
    class:list={[
        'lightbox not-prose relative',
        bg ? bg : '',
        wrapper ? wrapper : '',
        breakout ? utilities.breakout : '',
        className
            ? className
            : `${utilities.margin.y} ${utilities.tramline.all} ${
                  !breakout ? utilities.pull.x : ''
              }`,
    ]}
    {...rest}
    x-data="{ shown: false }"
    x-intersect.threshold.25="shown = true"
>
    <div class="flex flex-col justify-between md:flex-row md:items-center">
        <slot name="title" />
        <p
            class="pointer-events-none transform"
            :class="shown ? 'animate-fade-out-delay' : 'invisible'"
        >
            Tap to zoom any image <Icon
                name="lucide:zoom-in"
                class="inline-block h-5 w-auto"
            />
        </p>
    </div>
    <slot />

    <div
        class:list={[
            'not-prose grid grid-flow-dense auto-rows-[100px] grid-cols-3 gap-4 bg-underlay-light md:auto-rows-[160px] md:grid-cols-4 md:gap-8',
            utilities.margin.t,
        ]}
    >
        {
            images.map((image, i) => (
                <>
                    <div class:list={[image.class || '']}>
                        <LightboxImage
                            src={image}
                            alt={image.title}
                            width={480}
                            format="webp"
                            height={(image.height * 480) / image.width}
                            class="absolute inset-0 h-full w-full object-cover object-top"
                        />
                    </div>
                </>
            ))
        }
    </div>
</section>
<script>
    import PhotoSwipeLightbox from 'photoswipe/lightbox';
    import PhotoSwipeDynamicCaption from 'photoswipe-dynamic-caption-plugin';
    const smallScreenPadding = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
    };
    const largeScreenPadding = {
        top: 48,
        bottom: 48,
        left: 32,
        right: 32,
    };

    const lightbox = new PhotoSwipeLightbox({
        gallery: '#lightbox, .lightbox',
        children: 'a[data-lightbox]',
        // optionaly adjust viewport
        paddingFn: (viewportSize) => {
            return viewportSize.x < 700
                ? smallScreenPadding
                : largeScreenPadding;
        },
        wheelToZoom: true,
        bgOpacity: 0.85,
        pswpModule: () => import('photoswipe'),
    });

    lightbox.on('uiRegister', () => {
        lightbox.pswp.ui.registerElement({
            name: 'custom-caption',
            order: 9,
            isButton: false,
            appendTo: 'root',
            className:
                'bg-slate-900/75 !opacity-0 duration-300 rounded text-white text-sm max-w-[calc(100%-4rem)] w-auto absolute left-1/2 -translate-x-1/2 bottom-2.5 px-2 py-1',
            html: 'Caption text',
            // eslint-disable-next-line no-unused-vars
            onInit: (el, pswp) => {
                const captionDom = el;
                lightbox.pswp.on('change', () => {
                    if (!captionDom.classList.contains('!opacity-0')) {
                        captionDom.classList.add('!opacity-0');
                    }
                    const currSlideElement =
                        lightbox.pswp.currSlide.data.element;
                    let captionHTML = '';
                    if (currSlideElement) {
                        const hiddenCaption =
                            currSlideElement.querySelector('[data-caption]');
                        if (hiddenCaption) {
                            // get caption from element with class hidden-caption-content
                            captionHTML = hiddenCaption.innerHTML;
                            captionDom.classList.remove('!opacity-0');
                        } else {
                            // get caption from alt attribute
                            if (!captionDom.classList.contains('!opacity-0')) {
                                el.classList.add('!opacity-0');
                            }
                            captionHTML = currSlideElement
                                .querySelector('img')
                                .getAttribute('alt');
                        }
                    }
                    captionDom.innerHTML = captionHTML || '';
                });
            },
        });
    });

    lightbox.init();
</script>

<style>
    [data-lightbox] {
        @apply relative text-white after:icon-[lucide--zoom-in];
        @apply after:absolute after:left-1/2 after:top-1/2 after:z-10 after:flex after:-translate-x-1/2 after:-translate-y-1/2  after:items-center  after:justify-center after:text-2xl/none after:leading-inherit after:opacity-0 after:duration-300 after:hover:opacity-100;
        @apply before:absolute before:left-0 before:top-0 before:z-10 before:h-full before:w-full before:opacity-0  before:backdrop-blur-sm before:backdrop-brightness-125 before:transition before:duration-300 before:hover:bg-slate-900/75 before:hover:opacity-100;
    }
</style>
